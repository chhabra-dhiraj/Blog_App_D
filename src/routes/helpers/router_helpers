async function getError(title, image, body) {
    let error
    if (!title || !image || !body) {
        error = { header: 'Incomplete fields!', message: 'Please fill all the fields to continue.' }
    } else {
        const isValidUrl = await validImageURL(image)
        if (!isValidUrl) {
            error = { header: 'Invalid Image URL', message: 'Please enter a valid image url to continue.' }
        } else {
            undefined
        }
    }

    return error;
}

async function validImageURL(url) {
    let pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
        '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator

    if (!!pattern.test(url)) {
        return await fetch(url, { method: 'HEAD' }).then(res => {
            return res.headers.get('Content-Type').startsWith('image')
        })
    } else {
        return false
    }
}

module.exports = { getError, validImageURL }